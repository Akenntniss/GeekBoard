#!/usr/bin/env python3
"""
ü§ñ √âquipe COMPL√àTE d'Agents GeekBoard avec CrewAI
√âquipe de 10+ agents sp√©cialis√©s pour d√©veloppement complet
"""

import os
from crewai import Agent, Task, Crew, Process
from crewai_tools import FileReadTool, DirectoryReadTool

# Configuration Ollama
os.environ['OPENAI_API_BASE'] = 'http://localhost:11434/v1'
os.environ['OPENAI_API_KEY'] = 'ollama'
os.environ['OPENAI_MODEL_NAME'] = 'codeqwen:7b'

# Outils disponibles
file_tool = FileReadTool()
directory_tool = DirectoryReadTool()

# üëë AGENT CHEF ORCHESTRATEUR SUPREME
chef_supreme = Agent(
    role='Chef de Projet IA Supreme',
    goal='Orchestrer une √©quipe compl√®te d\'experts pour d√©velopper GeekBoard de mani√®re optimale',
    backstory="""
    Tu es le chef d'√©quipe senior avec 15+ ans d'exp√©rience qui ma√Ætrise parfaitement GeekBoard.
    Tu analyses chaque demande, coordonnes 10+ agents sp√©cialis√©s, et ensures l'excellence du projet.
    Tu prends des d√©cisions strat√©giques et optimises les workflows de l'√©quipe.
    """,
    verbose=True,
    allow_delegation=True,
    tools=[file_tool, directory_tool]
)

# üèóÔ∏è AGENT ARCHITECTE SYST√àME SENIOR
architecte_senior = Agent(
    role='Architecte Syst√®me Senior',
    goal='Concevoir l\'architecture technique compl√®te et superviser la migration PHP ‚Üí Next.js',
    backstory="""
    Expert architecte avec sp√©cialisation dans :
    - Architecture microservices et monolith modulaire
    - Migration progressive PHP 7.4+ vers Next.js 15.3 + React 19
    - Design patterns, DDD, SOLID principles
    - Scalabilit√©, performance, security by design
    - Architecture PWA et mobile-first
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üé® AGENT UX/UI DESIGNER
designer_ux = Agent(
    role='Designer UX/UI Expert',
    goal='Cr√©er des exp√©riences utilisateur exceptionnelles et des interfaces modernes',
    backstory="""
    Designer UX/UI senior sp√©cialis√© dans :
    - Recherche utilisateur et personas
    - Design systems et atomic design
    - Wireframes, prototypes, mockups
    - Accessibilit√© (WCAG 2.1) et responsive design
    - Interface mobile-first et PWA
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# ‚öõÔ∏è AGENT FRONTEND REACT MASTER
frontend_master = Agent(
    role='Frontend React Master',
    goal='D√©velopper l\'interface avec React 19, Next.js 15.3 et les derni√®res technologies',
    backstory="""
    Expert React/Next.js avec ma√Ætrise de :
    - React 19 (Server Components, Suspense, Concurrent Features)
    - Next.js 15.3 (App Router, Middleware, API Routes)
    - TypeScript avanc√©, Tailwind CSS, Framer Motion
    - State management (Zustand, Redux Toolkit)
    - Performance optimization et Core Web Vitals
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üîß AGENT BACKEND PHP EXPERT
backend_php = Agent(
    role='Backend PHP Expert',
    goal='Maintenir et optimiser le backend PHP existant pendant la migration',
    backstory="""
    Expert PHP senior avec sp√©cialisation dans :
    - PHP 7.4+ √† 8.3, POO avanc√©e, PSR standards
    - APIs REST, GraphQL, microservices
    - Frameworks (Laravel, Symfony, custom)
    - Optimisation performance et caching
    - Migration progressive vers Node.js/Next.js
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üöÄ AGENT BACKEND NODE.JS
backend_nodejs = Agent(
    role='Backend Node.js Expert',
    goal='D√©velopper les nouveaux services backend avec Node.js et Next.js API Routes',
    backstory="""
    Expert Node.js/Next.js backend avec ma√Ætrise de :
    - Node.js avanc√©, Express.js, Fastify
    - Next.js API Routes et Server Actions
    - TypeScript backend, validation (Zod)
    - APIs REST/GraphQL, WebSockets
    - Microservices et architecture serverless
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üóÑÔ∏è AGENT DATABASE EXPERT
database_expert = Agent(
    role='Expert Base de Donn√©es',
    goal='Optimiser et g√©rer la base de donn√©es MySQL et les migrations',
    backstory="""
    Expert bases de donn√©es avec sp√©cialisation dans :
    - MySQL 8.0+ optimization, indexing, partitioning
    - Schema design, normalization, denormalization
    - Migrations de donn√©es, backup/restore
    - Performance tuning, query optimization
    - Redis caching, session management
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üîí AGENT S√âCURIT√â & DEVOPS
security_devops = Agent(
    role='Expert S√©curit√© & DevOps',
    goal='Assurer la s√©curit√© compl√®te et l\'infrastructure DevOps',
    backstory="""
    Expert s√©curit√© et DevOps avec expertise dans :
    - S√©curit√© web (OWASP Top 10, CSP, CORS)
    - Authentication/Authorization (JWT, OAuth2, 2FA)
    - CI/CD (GitHub Actions, Docker, Kubernetes)
    - Monitoring (logging, alerting, observability)
    - Infrastructure as Code, deployment strategies
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# ‚ö° AGENT PERFORMANCE SPECIALIST
performance_specialist = Agent(
    role='Sp√©cialiste Performance',
    goal='Optimiser les performances frontend et backend pour une exp√©rience ultra-rapide',
    backstory="""
    Expert performance avec sp√©cialisation dans :
    - Core Web Vitals, Lighthouse optimization
    - Bundle optimization, code splitting, lazy loading
    - Caching strategies (browser, CDN, server)
    - Database query optimization
    - Performance monitoring et profiling
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üß™ AGENT QA & TESTS AUTOMATION
qa_automation = Agent(
    role='Expert QA & Tests Automation',
    goal='Garantir la qualit√© avec une suite de tests compl√®te et automatis√©e',
    backstory="""
    Expert QA et tests automation avec ma√Ætrise de :
    - Tests unitaires (Jest, Vitest, PHPUnit)
    - Tests d'int√©gration et API testing
    - Tests E2E (Playwright, Cypress)
    - Tests de performance et charge
    - CI/CD testing pipeline
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üì± AGENT MOBILE & PWA
mobile_pwa = Agent(
    role='Expert Mobile & PWA',
    goal='Cr√©er une exp√©rience mobile parfaite avec PWA et optimisations mobiles',
    backstory="""
    Expert mobile et PWA avec sp√©cialisation dans :
    - Progressive Web Apps (PWA) avanc√©es
    - Service Workers, offline-first strategies
    - Mobile performance optimization
    - Touch interfaces et gestures
    - App store deployment (PWA to stores)
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üìä AGENT ANALYTICS & SEO
analytics_seo = Agent(
    role='Expert Analytics & SEO',
    goal='Optimiser le SEO et impl√©menter un tracking analytics complet',
    backstory="""
    Expert SEO et analytics avec expertise dans :
    - SEO technique (meta, structured data, sitemap)
    - Performance SEO, Core Web Vitals
    - Google Analytics 4, tracking events
    - A/B testing, conversion optimization
    - GDPR compliance, privacy-first analytics
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üìö AGENT DOCUMENTATION
documentation_expert = Agent(
    role='Expert Documentation',
    goal='Cr√©er une documentation technique compl√®te et maintenue',
    backstory="""
    Expert documentation technique avec sp√©cialisation dans :
    - Documentation API (OpenAPI/Swagger)
    - Guides d√©veloppeur, architecture docs
    - Code documentation et commentaires
    - Tutoriels utilisateur, FAQ
    - Documentation living et automated docs
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üöÄ FONCTION D'ORCHESTRATION AVANC√âE
def executer_demande_complete(demande_utilisateur: str):
    """
    Orchestration avanc√©e avec toute l'√©quipe
    """
    
    # Analyse initiale par le chef supr√™me
    tache_analyse = Task(
        description=f"""
        ANALYSE STRAT√âGIQUE pour GeekBoard : "{demande_utilisateur}"
        
        Effectue une analyse compl√®te :
        1. Objectifs business et techniques
        2. Agents requis pour cette mission
        3. Architecture de t√¢ches et d√©pendances
        4. Estimation timeline et ressources
        5. Risques et mitigation strategies
        6. Plan de d√©l√©gation optimis√©
        
        Retourne un plan d'action d√©taill√© avec assignation d'agents.
        """,
        agent=chef_supreme,
        expected_output="Plan strat√©gique complet avec d√©l√©gations sp√©cialis√©es"
    )
    
    # √âquipe compl√®te
    equipe_complete = [
        chef_supreme, architecte_senior, designer_ux, frontend_master,
        backend_php, backend_nodejs, database_expert, security_devops,
        performance_specialist, qa_automation, mobile_pwa, 
        analytics_seo, documentation_expert
    ]
    
    # Cr√©ation de l'√©quipe avec processus hi√©rarchique
    crew = Crew(
        agents=equipe_complete,
        tasks=[tache_analyse],
        process=Process.hierarchical,
        manager_agent=chef_supreme,
        verbose=True,
        planning=True  # Planification automatique
    )
    
    print(f"\nüöÄ MISSION LANC√âE : {demande_utilisateur}")
    print("=" * 80)
    print("üë• √âquipe mobilis√©e : 13 agents experts")
    print("üß† IA de coordination : Chef Supr√™me")
    print("=" * 80)
    
    try:
        resultat = crew.kickoff()
        
        print("\n‚úÖ MISSION ACCOMPLIE !")
        print("=" * 80)
        print(resultat)
        print("=" * 80)
        
        return resultat
    except Exception as e:
        print(f"‚ùå Erreur mission : {e}")
        return None

# üí¨ INTERFACE CONVERSATIONNELLE AVANC√âE
def interface_avancee():
    """
    Interface conversationnelle avec l'√©quipe compl√®te
    """
    print("\nü§ñ √âQUIPE COMPL√àTE D'AGENTS GEEKBOARD")
    print("=" * 80)
    print("üë• VOTRE √âQUIPE DE 13 EXPERTS :")
    print("üëë Chef Supr√™me - Orchestration strat√©gique")
    print("üèóÔ∏è  Architecte Senior - Architecture syst√®me")
    print("üé® Designer UX/UI - Exp√©rience utilisateur")
    print("‚öõÔ∏è  Frontend Master - React/Next.js expert")
    print("üîß Backend PHP - Maintenance & migration")
    print("üöÄ Backend Node.js - Nouveaux services")
    print("üóÑÔ∏è  Database Expert - MySQL & optimisation")
    print("üîí Security DevOps - S√©curit√© & infra")
    print("‚ö° Performance - Optimisation vitesse")
    print("üß™ QA Automation - Tests & qualit√©")
    print("üì± Mobile PWA - Exp√©rience mobile")
    print("üìä Analytics SEO - Tracking & r√©f√©rencement")
    print("üìö Documentation - Docs technique")
    print("=" * 80)
    
    # Suggestions contextuelles
    suggestions = [
        "üéØ ARCHITECTURE : 'Con√ßois l'architecture compl√®te de GeekBoard'",
        "üöÄ MIGRATION : 'Planifie la migration PHP vers Next.js'",
        "üé® UI/UX : 'Am√©liore l'interface utilisateur de GeekBoard'",
        "‚ö° PERFORMANCE : 'Optimise les performances de l'application'",
        "üîí S√âCURIT√â : 'Audit s√©curit√© complet de GeekBoard'",
        "üì± MOBILE : 'D√©veloppe la version mobile PWA'",
        "üß™ TESTS : 'Impl√©mente une suite de tests compl√®te'",
        "üìä SEO : 'Optimise le r√©f√©rencement de GeekBoard'"
    ]
    
    print("\nüí° SUGGESTIONS DE MISSIONS :")
    for suggestion in suggestions:
        print(f"   {suggestion}")
    
    print("\nüéÆ Commandes sp√©ciales :")
    print("   ‚Ä¢ 'status' - √âtat de l'√©quipe")
    print("   ‚Ä¢ 'help' - Aide d√©taill√©e") 
    print("   ‚Ä¢ 'quit' - Quitter")
    print("\n" + "="*80)
    
    while True:
        demande = input("\nüéØ VOTRE MISSION : ").strip()
        
        if demande.lower() in ['quit', 'exit', 'q']:
            print("üëã Mission termin√©e ! L'√©quipe se met en standby.")
            break
        elif demande.lower() == 'status':
            print("üìä STATUT √âQUIPE : ‚úÖ 13 agents pr√™ts | üöÄ Ollama actif | ‚ö° Performance optimale")
            continue
        elif demande.lower() == 'help':
            print("üìñ GUIDE : D√©crivez votre objectif en fran√ßais. L'√©quipe analysera et ex√©cutera.")
            continue
            
        if demande:
            try:
                print("\nüîÑ Analyse et d√©l√©gation en cours...")
                executer_demande_complete(demande)
            except Exception as e:
                print(f"‚ùå Erreur mission : {e}")
                print("üí° V√©rifiez qu'Ollama fonctionne : ollama list")
        
        print("\n" + "="*80)

if __name__ == "__main__":
    interface_avancee() 