#!/usr/bin/env python3
"""
ü§ñ √âquipe d'Agents GeekBoard avec CrewAI
√âquipe collaborative d'agents IA pour d√©velopper et maintenir GeekBoard
"""

import os
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool, FileReadTool, DirectoryReadTool

# Configuration
os.environ['OPENAI_API_BASE'] = 'http://localhost:11434/v1'
os.environ['OPENAI_API_KEY'] = 'ollama'  # Factice pour Ollama
os.environ['OPENAI_MODEL_NAME'] = 'codeqwen:7b'

# Outils disponibles
file_tool = FileReadTool()
directory_tool = DirectoryReadTool()

# üéØ AGENT CHEF ORCHESTRATEUR
chef_orchestrateur = Agent(
    role='Chef de Projet IA',
    goal='Analyser les demandes utilisateur et coordonner l\'√©quipe d\'agents pour d√©velopper GeekBoard',
    backstory="""
    Tu es le chef d'√©quipe exp√©riment√© qui comprend parfaitement GeekBoard.
    Tu analyses chaque demande et d√©l√®gues aux bons agents sp√©cialis√©s.
    Tu coordonnes les efforts et ensures que le projet avance efficacement.
    """,
    verbose=True,
    allow_delegation=True,
    tools=[file_tool, directory_tool]
)

# üèóÔ∏è AGENT ARCHITECTE SYST√àME
architecte_systeme = Agent(
    role='Architecte Syst√®me Senior',
    goal='Concevoir l\'architecture technique et g√©rer la migration PHP vers Next.js pour GeekBoard',
    backstory="""
    Tu es un architecte syst√®me expert sp√©cialis√© dans :
    - Migration progressive PHP vers Next.js 15.3 + React 19
    - Architecture API REST et base de donn√©es MySQL
    - Configuration PWA et optimisation performance
    - Patterns de s√©curit√© et scalabilit√©
    
    Tu connais parfaitement le projet GeekBoard existant et ses besoins techniques.
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üé® AGENT FRONTEND REACT
frontend_react = Agent(
    role='D√©veloppeur Frontend React Expert',
    goal='Cr√©er l\'interface utilisateur moderne avec Next.js, React 19 et Tailwind CSS',
    backstory="""
    Tu es un expert React/Next.js sp√©cialis√© dans :
    - Composants React 19 avec hooks modernes
    - Interface responsive avec Tailwind CSS
    - PWA et optimisation mobile
    - UX/UI moderne et intuitive
    - Int√©gration avec APIs backend
    
    Tu d√©veloppes des interfaces √©l√©gantes et performantes pour GeekBoard.
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üîß AGENT BACKEND & API
backend_api = Agent(
    role='D√©veloppeur Backend & API',
    goal='D√©velopper les APIs et g√©rer la migration progressive du backend PHP',
    backstory="""
    Tu es un expert backend sp√©cialis√© dans :
    - APIs REST avec PHP et transition vers Node.js/Next.js
    - Gestion base de donn√©es MySQL et optimisation
    - Authentification et s√©curit√©
    - Migration progressive des modules m√©tier
    
    Tu maintiens la compatibilit√© pendant la migration de GeekBoard.
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# ‚ö° AGENT PERFORMANCE & TESTS
performance_tests = Agent(
    role='Expert Performance & Tests',
    goal='Optimiser les performances et garantir la qualit√© avec des tests automatis√©s',
    backstory="""
    Tu es un expert en :
    - Tests automatis√©s (unit, integration, e2e)
    - Optimisation performance frontend/backend
    - Monitoring et observabilit√©
    - CI/CD et d√©ploiement
    
    Tu assures la qualit√© et les performances de GeekBoard.
    """,
    verbose=True,
    tools=[file_tool, directory_tool]
)

# üöÄ FONCTION PRINCIPALE D'ORCHESTRATION
def executer_demande(demande_utilisateur: str):
    """
    Point d'entr√©e principal pour traiter les demandes utilisateur
    """
    
    # T√¢che d'analyse initiale par le chef
    tache_analyse = Task(
        description=f"""
        Analyse cette demande utilisateur pour GeekBoard : "{demande_utilisateur}"
        
        D√©termine :
        1. L'objectif principal de la demande
        2. Quel(s) agent(s) sp√©cialis√©(s) doit/doivent intervenir
        3. L'ordre optimal des t√¢ches
        4. Les priorit√©s et d√©pendances
        
        Fournis un plan d'action structur√© avec d√©l√©gation appropri√©e.
        """,
        agent=chef_orchestrateur,
        expected_output="Plan d'action d√©taill√© avec d√©l√©gations d'agents"
    )
    
    # Cr√©ation dynamique de l'√©quipe selon la demande
    crew = Crew(
        agents=[chef_orchestrateur, architecte_systeme, frontend_react, backend_api, performance_tests],
        tasks=[tache_analyse],
        process=Process.hierarchical,
        manager_agent=chef_orchestrateur,
        verbose=True
    )
    
    # Ex√©cution
    print(f"\nüöÄ Traitement de votre demande : {demande_utilisateur}")
    print("=" * 60)
    
    resultat = crew.kickoff()
    
    print("\n‚úÖ R√©sultat :")
    print("=" * 60)
    print(resultat)
    
    return resultat

# üí¨ INTERFACE INTERACTIVE
def interface_conversationnelle():
    """
    Interface simple pour interagir avec l'√©quipe d'agents
    """
    print("\nü§ñ √âquipe d'Agents GeekBoard - Interface Conversationnelle")
    print("=" * 60)
    print("üí° Exemples de demandes :")
    print("   ‚Ä¢ 'Optimise les performances de la liste des r√©parations'")
    print("   ‚Ä¢ 'Cr√©e un composant de recherche de clients'")
    print("   ‚Ä¢ 'Migre le module de facturation vers Next.js'")
    print("   ‚Ä¢ 'Ajoute des tests pour l'authentification'")
    print("\nTapez 'quit' pour quitter\n")
    
    while True:
        demande = input("üéØ Votre demande : ").strip()
        
        if demande.lower() in ['quit', 'exit', 'q']:
            print("üëã Au revoir !")
            break
            
        if demande:
            try:
                executer_demande(demande)
            except Exception as e:
                print(f"‚ùå Erreur : {e}")
        
        print("\n" + "="*60 + "\n")

if __name__ == "__main__":
    interface_conversationnelle() 