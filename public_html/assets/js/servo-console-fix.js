/**
 * ğŸš¨ SERVO Console Fix - Script de console pour dÃ©bloquer immÃ©diatement SERVO
 * Version: 1.0
 * Date: 2024-10-12
 * 
 * Copiez et collez ce code dans la console du navigateur pour dÃ©bloquer immÃ©diatement
 */

(function() {
    console.log('ğŸš¨ [SERVO-CONSOLE] DÃ©marrage de la correction immÃ©diate...');
    
    // 1. Masquer immÃ©diatement l'animation SERVO
    const servoElements = document.querySelectorAll('.servo-animation, .loading-animation, [class*="servo"], [class*="loading"]');
    console.log('ğŸš¨ [SERVO-CONSOLE] Ã‰lÃ©ments SERVO trouvÃ©s:', servoElements.length);
    
    servoElements.forEach((element, index) => {
        console.log(`ğŸš¨ [SERVO-CONSOLE] Masquage de l'Ã©lÃ©ment ${index + 1}:`, element);
        element.style.display = 'none';
        element.style.visibility = 'hidden';
        element.style.opacity = '0';
        element.style.animation = 'none';
        element.style.transition = 'none';
        element.style.height = '0';
        element.style.width = '0';
        element.style.overflow = 'hidden';
    });
    
    // 2. Supprimer les scripts dupliquÃ©s
    const duplicateScripts = document.querySelectorAll('script[src*="status-modal.js"], script[src*="devis-clean.js"], script[src*="session-helper.js"], script[src*="update-status-modal.js"], script[src*="modal-helper.js"]');
    console.log('ğŸš¨ [SERVO-CONSOLE] Scripts dupliquÃ©s trouvÃ©s:', duplicateScripts.length);
    
    duplicateScripts.forEach((script, index) => {
        if (index > 0) {
            console.log(`ğŸš¨ [SERVO-CONSOLE] Suppression du script dupliquÃ© ${index + 1}:`, script.src);
            script.remove();
        }
    });
    
    // 3. Nettoyer les variables globales en conflit
    console.log('ğŸš¨ [SERVO-CONSOLE] Nettoyage des variables globales...');
    try {
        if (typeof window.StatusModal !== 'undefined') {
            delete window.StatusModal;
            console.log('ğŸš¨ [SERVO-CONSOLE] StatusModal supprimÃ©');
        }
        if (typeof window.DevisCleanManager !== 'undefined') {
            delete window.DevisCleanManager;
            console.log('ğŸš¨ [SERVO-CONSOLE] DevisCleanManager supprimÃ©');
        }
        if (typeof window.SessionHelper !== 'undefined') {
            delete window.SessionHelper;
            console.log('ğŸš¨ [SERVO-CONSOLE] SessionHelper supprimÃ©');
        }
        if (typeof window.UpdateStatusModal !== 'undefined') {
            delete window.UpdateStatusModal;
            console.log('ğŸš¨ [SERVO-CONSOLE] UpdateStatusModal supprimÃ©');
        }
        if (typeof window.ModalHelper !== 'undefined') {
            delete window.ModalHelper;
            console.log('ğŸš¨ [SERVO-CONSOLE] ModalHelper supprimÃ©');
        }
    } catch (e) {
        console.log('ğŸš¨ [SERVO-CONSOLE] Erreur lors du nettoyage des variables:', e);
    }
    
    // 4. Fermer tous les modals ouverts
    const openModals = document.querySelectorAll('.modal.show, .modal[style*="display: block"]');
    console.log('ğŸš¨ [SERVO-CONSOLE] Modals ouverts trouvÃ©s:', openModals.length);
    
    openModals.forEach((modal, index) => {
        console.log(`ğŸš¨ [SERVO-CONSOLE] Fermeture du modal ${index + 1}:`, modal.id || modal.className);
        modal.classList.remove('show');
        modal.style.display = 'none';
        modal.style.visibility = 'hidden';
    });
    
    // 5. Supprimer tous les backdrops
    const backdrops = document.querySelectorAll('.modal-backdrop');
    console.log('ğŸš¨ [SERVO-CONSOLE] Backdrops trouvÃ©s:', backdrops.length);
    
    backdrops.forEach((backdrop, index) => {
        console.log(`ğŸš¨ [SERVO-CONSOLE] Suppression du backdrop ${index + 1}`);
        backdrop.remove();
    });
    
    // 6. RÃ©initialiser le body
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
    console.log('ğŸš¨ [SERVO-CONSOLE] Body rÃ©initialisÃ©');
    
    // 7. Masquer tous les Ã©lÃ©ments de chargement
    const loadingElements = document.querySelectorAll('.loading, .spinner, .loader, [class*="loading"], [class*="spinner"]');
    console.log('ğŸš¨ [SERVO-CONSOLE] Ã‰lÃ©ments de chargement trouvÃ©s:', loadingElements.length);
    
    loadingElements.forEach((element, index) => {
        console.log(`ğŸš¨ [SERVO-CONSOLE] Masquage de l'Ã©lÃ©ment de chargement ${index + 1}`);
        element.style.display = 'none';
        element.style.visibility = 'hidden';
    });
    
    // 8. Forcer l'affichage du contenu principal
    const mainContent = document.querySelector('.main-content, .content, .container, #main-content, #content');
    if (mainContent) {
        console.log('ğŸš¨ [SERVO-CONSOLE] Contenu principal trouvÃ©, forÃ§age de l\'affichage');
        mainContent.style.display = 'block';
        mainContent.style.visibility = 'visible';
        mainContent.style.opacity = '1';
    } else {
        console.log('ğŸš¨ [SERVO-CONSOLE] Aucun contenu principal trouvÃ©');
    }
    
    // 9. Forcer le rechargement des styles
    const styleSheets = document.querySelectorAll('link[rel="stylesheet"]');
    styleSheets.forEach(link => {
        const href = link.href;
        link.href = href + '?v=' + Date.now();
    });
    
    console.log('ğŸš¨ [SERVO-CONSOLE] âœ… Correction immÃ©diate terminÃ©e');
    console.log('ğŸš¨ [SERVO-CONSOLE] La page devrait maintenant Ãªtre dÃ©bloquÃ©e');
    console.log('ğŸš¨ [SERVO-CONSOLE] Si le problÃ¨me persiste, rechargez la page');
    
    // Retourner un message de succÃ¨s
    return 'SERVO dÃ©bloquÃ© avec succÃ¨s !';
})();








