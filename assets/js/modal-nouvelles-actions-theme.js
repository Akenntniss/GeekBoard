/**
 * MODAL NOUVELLES ACTIONS - GESTIONNAIRE DE TH√àME
 * G√®re l'application du th√®me clair corporate par d√©faut
 * et la d√©tection du changement de th√®me
 */

class ModalNouvellesActionsTheme {
    constructor() {
        console.log('üé® Initialisation du gestionnaire de th√®me pour nouvelles_actions_modal');
        
        this.modal = document.getElementById('nouvelles_actions_modal');
        this.currentTheme = 'clair'; // Par d√©faut en mode clair
        
        this.init();
    }
    
    init() {
        if (!this.modal) {
            console.warn('üé® Modal nouvelles_actions_modal non trouv√©');
            return;
        }
        
        // Appliquer le th√®me clair par d√©faut
        this.applyTheme('clair');
        
        // √âcouter les √©v√©nements de changement de th√®me
        this.setupThemeListeners();
        
        // √âcouter l'ouverture du modal pour s'assurer que le th√®me est appliqu√©
        this.setupModalListeners();
        
        console.log('üé® Gestionnaire de th√®me initialis√© avec succ√®s');
    }
    
    setupThemeListeners() {
        // √âcouter les changements de th√®me syst√®me (optionnel)
        if (window.matchMedia) {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            mediaQuery.addListener((e) => {
                // Ne pas changer automatiquement, garder le mode clair par d√©faut
                console.log('üé® Changement de th√®me syst√®me d√©tect√©, mais mode clair maintenu');
            });
        }
        
        // √âcouter les √©v√©nements personnalis√©s de changement de th√®me
        document.addEventListener('themeChange', (e) => {
            const newTheme = e.detail?.theme || 'clair';
            console.log('üé® Changement de th√®me d√©tect√©:', newTheme);
            this.applyTheme(newTheme);
        });
        
        // √âcouter les clics sur les boutons de th√®me (si ils existent)
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-theme]')) {
                const theme = e.target.getAttribute('data-theme');
                console.log('üé® Bouton de th√®me cliqu√©:', theme);
                this.applyTheme(theme);
            }
        });
    }
    
    setupModalListeners() {
        // √âcouter l'ouverture du modal
        this.modal.addEventListener('show.bs.modal', () => {
            console.log('üé® Modal en cours d\'ouverture, application du th√®me:', this.currentTheme);
            this.applyTheme(this.currentTheme);
        });
        
        this.modal.addEventListener('shown.bs.modal', () => {
            console.log('üé® Modal ouvert, v√©rification du th√®me');
            this.verifyTheme();
            this.fixCloseButton();
        });
    }
    
    applyTheme(theme) {
        if (!this.modal) return;
        
        console.log('üé® Application du th√®me:', theme);
        
        // Supprimer toutes les classes de th√®me existantes
        this.modal.classList.remove('dark-mode', 'light-mode', 'corporate-mode');
        
        // Appliquer le nouveau th√®me
        switch (theme) {
            case 'nuit':
            case 'dark':
                this.modal.classList.add('dark-mode');
                this.currentTheme = 'nuit';
                console.log('üé® Mode nuit appliqu√©');
                break;
                
            case 'clair':
            case 'light':
            case 'corporate':
            default:
                // Mode clair corporate par d√©faut
                this.modal.classList.add('corporate-mode');
                this.currentTheme = 'clair';
                console.log('üé® Mode clair corporate appliqu√©');
                break;
        }
        
        // D√©clencher un √©v√©nement personnalis√©
        const event = new CustomEvent('modalThemeChanged', {
            detail: {
                modal: 'nouvelles_actions_modal',
                theme: this.currentTheme
            }
        });
        document.dispatchEvent(event);
    }
    
    verifyTheme() {
        if (!this.modal) return;
        
        const hasLight = this.modal.classList.contains('corporate-mode');
        const hasDark = this.modal.classList.contains('dark-mode');
        
        console.log('üé® V√©rification du th√®me - Clair:', hasLight, 'Nuit:', hasDark);
        
        // Si aucun th√®me n'est appliqu√©, forcer le mode clair
        if (!hasLight && !hasDark) {
            console.log('üé® Aucun th√®me d√©tect√©, application du mode clair par d√©faut');
            this.applyTheme('clair');
        }
    }
    
    fixCloseButton() {
        if (!this.modal) return;
        
        const closeButton = this.modal.querySelector('.btn-close');
        if (!closeButton) {
            console.warn('üé® Bouton de fermeture non trouv√©');
            return;
        }
        
        // S'assurer que le bouton est visible et fonctionnel
        closeButton.style.display = 'flex';
        closeButton.style.visibility = 'visible';
        closeButton.style.opacity = '1';
        closeButton.style.pointerEvents = 'auto';
        
        // V√©rifier que l'√©v√©nement de fermeture est attach√©
        if (!closeButton.hasAttribute('data-bs-dismiss')) {
            closeButton.setAttribute('data-bs-dismiss', 'modal');
        }
        
        // Ajouter un gestionnaire d'√©v√©nement de secours
        closeButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Fermer le modal manuellement si Bootstrap ne fonctionne pas
            if (window.bootstrap && window.bootstrap.Modal) {
                const modalInstance = window.bootstrap.Modal.getInstance(this.modal);
                if (modalInstance) {
                    modalInstance.hide();
                } else {
                    // Cr√©er une nouvelle instance et fermer
                    const newModalInstance = new window.bootstrap.Modal(this.modal);
                    newModalInstance.hide();
                }
            } else {
                // Fallback : fermeture manuelle
                this.modal.classList.remove('show');
                this.modal.style.display = 'none';
                document.body.classList.remove('modal-open');
                
                // Supprimer le backdrop
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.remove();
                }
            }
        });
        
        console.log('üé® Bouton de fermeture corrig√© et v√©rifi√©');
    }
    
    getCurrentTheme() {
        return this.currentTheme;
    }
    
    setTheme(theme) {
        this.applyTheme(theme);
    }
    
    toggleTheme() {
        const newTheme = this.currentTheme === 'clair' ? 'nuit' : 'clair';
        this.applyTheme(newTheme);
        return newTheme;
    }
}

// Initialisation automatique
let modalNouvellesActionsTheme;

document.addEventListener('DOMContentLoaded', function() {
    console.log('üé® Initialisation du gestionnaire de th√®me nouvelles_actions_modal');
    modalNouvellesActionsTheme = new ModalNouvellesActionsTheme();
    
    // Fonction globale pour changer le th√®me
    window.setNouvellesActionsTheme = function(theme) {
        if (modalNouvellesActionsTheme) {
            modalNouvellesActionsTheme.setTheme(theme);
        }
    };
    
    // Fonction globale pour basculer le th√®me
    window.toggleNouvellesActionsTheme = function() {
        if (modalNouvellesActionsTheme) {
            return modalNouvellesActionsTheme.toggleTheme();
        }
        return 'clair';
    };
    
    console.log('‚úÖ Gestionnaire de th√®me nouvelles_actions_modal initialis√©');
});

// √âcouter les changements de th√®me depuis modal-recherche-moderne.js
document.addEventListener('DOMContentLoaded', function() {
    // Observer les mutations pour d√©tecter les changements de th√®me
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                // V√©rifier si c'est un changement de th√®me sur un autre modal
                const target = mutation.target;
                if (target.classList.contains('recherche-modal-overlay')) {
                    const isDark = target.classList.contains('dark-mode');
                    const theme = isDark ? 'nuit' : 'clair';
                    
                    console.log('üé® Changement de th√®me d√©tect√© sur modal recherche:', theme);
                    
                    // Appliquer le m√™me th√®me au modal nouvelles actions
                    if (modalNouvellesActionsTheme) {
                        modalNouvellesActionsTheme.setTheme(theme);
                    }
                }
            }
        });
    });
    
    // Observer les changements sur le document
    observer.observe(document.body, {
        attributes: true,
        subtree: true,
        attributeFilter: ['class']
    });
});

// Export pour utilisation dans d'autres scripts
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ModalNouvellesActionsTheme;
}
